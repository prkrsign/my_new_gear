# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/ruby:2.5.1-node-browsers
      - image: circleci/mysql:5.6

    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
      - MYSQL_ROOT_HOST: '%'
      - RAILS_ENV: 'test'
      - BUNDLER_VERSION: 2.0.2

    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
            
      - run:
          name: install dependencies
          command: |
            gem install bundler -v 2.0.2
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run: mv config/database.yml.ci config/database.yml 

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      - run:
          name: Rubocop
          command: bundle exec rubocop


      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      - add_ssh_keys:
          fingerprints:
            - "f9:31:ef:14:eb:0f:6e:5a:bc:cc:d9:74:62:e4:55:5f"

  deploy:  
    name: Capistrano deploy
    command:
      bundle exec cap production deploy

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - build
      - deploy:
          requires: # buildが成功したら実行する
            - build
          # filters:
          #   branches:
          #     only: master
